#!/usr/bin/env python3
"""
Message Templates - Standardized messages for Claude Agent
Provides consistent error messages, notifications, and user feedback
"""

from typing import Any, Dict, Optional


class MessageTemplates:
    """Centralized message templates for consistent communication"""

    # GitHub notification templates
    TASK_STARTED = """ü§ñ **Claude Agent Started**

Working on branch: `{branch}`

**Task**: {task_title}
**Estimated scope**: {word_count} words

‚öôÔ∏è Processing..."""

    TASK_COMPLETED = """‚úÖ **Task Completed** @{reviewer}

**PR Created**: #{pr_number}
**Branch**: `{branch}`
**Lines changed**: {lines_changed}{cost_section}

Ready for review! üéâ"""

    TASK_FAILED = """‚ùå **Claude Agent Failed** @{reviewer}

**Issue**: {error_reason}
**Branch**: `{branch}`

Manual intervention required."""

    VALIDATION_FAILED = """‚ùå **Claude Agent Validation Failed** @{reviewer}

**Issues**:
{issues_list}

**Branch**: `{branch}`
**Lines changed**: {lines_changed}

Manual review required."""

    SAFETY_BLOCKED = """‚ùå **BLOCKED - Safety Review Required** @{reviewer}

**Issues Found**:
{safety_concerns}

**Recommendation**: Manual review required before proceeding.

üö´ Claude Agent execution halted."""

    # Error message templates
    GITHUB_AUTH_ERROR = "‚ùå GitHub authentication failed: {error}"
    GITHUB_API_ERROR = "‚ùå GitHub API error: {error}"
    GITHUB_DATA_ERROR = "‚ùå GitHub data parsing failed: {error}"

    INPUT_VALIDATION_ERROR = "‚ùå Input validation failed: {error}"
    CONTAINER_ERROR = "‚ùå Container operation failed: {error}"

    # Success message templates
    GITHUB_COMMENT_SUCCESS = "‚úÖ Posted comment to {type} #{number}"
    GITHUB_PR_CREATED = "‚úÖ Created PR #{pr_number}: {title}"
    CONTAINER_STARTED = "üöÄ Starting container: {container_name}"

    # Warning message templates
    VALIDATION_WARNING = "‚ö†Ô∏è  Warning: {warning_message}"
    RESOURCE_WARNING = "‚ö†Ô∏è  Warning: {resource} usage high: {details}"

    # GitHub status update templates
    STATUS_UPDATE = "‚öôÔ∏è **Claude Agent Status Update**\n\n{message}"
    PROGRESS_UPDATE = """üîÑ **Progress Update**

**Current Step**: {step}
**Details**: {details}

*Working directory*: `/workspace`"""

    COMPLETION_NOTIFICATION = """‚úÖ **Task Completed** @{reviewer}

**Summary**: {summary}
{cost_info}
**Next Steps**: Please review the changes and provide feedback.

üéâ Ready for review!"""

    ERROR_NOTIFICATION = """‚ùå **Claude Agent Error** @{reviewer}

**Issue**: {error}

**Status**: Manual intervention required.

Please review the error and provide guidance."""

    CLARIFICATION_REQUEST = """‚ùì **Clarification Needed**

**Question**: {question}

**Context**: While working on this task, I need additional information to proceed correctly.

Please provide guidance when convenient."""

    COMMIT_MESSAGE = """Auto-fix: {task_summary_short}

{task_summary}

ü§ñ Generated with Claude Agent
"""

    PR_BODY_TEMPLATE = """## Summary
{summary}

## Changes Made
- Automated fixes implemented by Claude Agent
- Code changes follow project conventions
- Security scanning completed{cost_info}

## Co-Authors
This PR includes commits co-authored by @{reviewer}

## Testing
- [ ] Manual testing recommended
- [ ] Verify all functionality works as expected
- [ ] Check for any edge cases

## Review Notes
@{reviewer} - This PR was generated automatically with you as co-author. Please review and test the changes.{issue_ref}

---
ü§ñ Generated by [Claude Agent Runner](https://github.com/anthropics/claude-code)
Co-authored-by: {reviewer} <{reviewer}@users.noreply.github.com>"""

    # CLI output messages
    COMMIT_PUSH_SUCCESS = "‚úÖ Committed and pushed branch: {branch_name}"
    COMMIT_PUSH_FAILED = "‚ùå Failed to commit/push: {error}"
    PR_CREATED_SUCCESS = "‚úÖ Created PR: {pr_url}"
    PR_CREATE_FAILED = "‚ùå Failed to create PR: {output}"
    STATUS_FALLBACK = "üìù Status: {message}"
    NO_CLAUDE_MENTIONS = "No @claude mentions found in PR comments"

    # PR Task extraction templates
    PR_TASK_HEADER = """# Continue Work on PR #{pr_number}

## Original PR Details
**Title**: {title}
**Status**: {state}
**Branch**: {branch}

## Original Description
{description}

## Latest Comments Mentioning @claude
"""

    PR_TASK_COMMENT = """
### Comment by @{user} ({created_at})
{body}

---
"""

    PR_TASK_NO_COMMENTS = "\nNo recent comments mentioning @claude found."

    PR_TASK_INSTRUCTIONS = """
## Instructions
Based on the PR context and comments above, continue working on this PR:
1. Address any feedback or requests in the comments
2. Make the requested changes to the codebase
3. Update tests if needed
4. Add commits to the existing PR branch
5. Respond to comments with progress updates

Focus on the most recent comments mentioning @claude for current tasks.
"""

    # Error messages for exceptions
    GITHUB_AUTH_FAILED = "GitHub authentication failed: {error}"
    GITHUB_RESOURCE_NOT_FOUND = "GitHub resource not found"
    ISSUE_DATA_PARSE_ERROR = "Failed to parse issue data: {error}"
    PR_DATA_PARSE_ERROR = "Failed to parse PR data: {error}"
    UNABLE_TO_FETCH_PR = "Unable to fetch PR data"

    @staticmethod
    def format_task_started(branch: str, task_title: str, word_count: int) -> str:
        """Format task started notification"""
        return MessageTemplates.TASK_STARTED.format(
            branch=branch, task_title=task_title, word_count=word_count
        )

    @staticmethod
    def format_task_completed(
        reviewer: str,
        pr_number: str,
        branch: str,
        lines_changed: int,
        cost_info: Optional[Dict[str, Any]] = None,
    ) -> str:
        """Format task completed notification"""
        cost_section = ""
        if cost_info:
            cost_lines = []
            if cost_info.get("total_cost", 0) > 0:
                cost_lines.append(f"üí∞ **Cost**: ${cost_info['total_cost']:.4f}")
            if cost_info.get("total_tokens", 0) > 0:
                cost_lines.append(f"üî§ **Tokens**: {cost_info['total_tokens']:,}")
            if cost_lines:
                cost_section = "\n" + "\n".join(cost_lines)

        return MessageTemplates.TASK_COMPLETED.format(
            reviewer=reviewer,
            pr_number=pr_number,
            branch=branch,
            lines_changed=lines_changed,
            cost_section=cost_section,
        )

    @staticmethod
    def format_task_failed(reviewer: str, error_reason: str, branch: str) -> str:
        """Format task failure notification"""
        return MessageTemplates.TASK_FAILED.format(
            reviewer=reviewer, error_reason=error_reason, branch=branch
        )

    @staticmethod
    def format_validation_failed(
        reviewer: str, issues: list, branch: str, lines_changed: int
    ) -> str:
        """Format validation failure notification"""
        issues_list = "\n".join(f"‚Ä¢ {issue}" for issue in issues)
        return MessageTemplates.VALIDATION_FAILED.format(
            reviewer=reviewer,
            issues_list=issues_list,
            branch=branch,
            lines_changed=lines_changed,
        )

    @staticmethod
    def format_safety_blocked(reviewer: str, safety_concerns: list) -> str:
        """Format safety block notification"""
        concerns_list = "\n".join(f"‚Ä¢ {concern}" for concern in safety_concerns)
        return MessageTemplates.SAFETY_BLOCKED.format(
            reviewer=reviewer, safety_concerns=concerns_list
        )

    @staticmethod
    def github_comment_success(comment_type: str, number: str) -> str:
        """Format GitHub comment success message"""
        return MessageTemplates.GITHUB_COMMENT_SUCCESS.format(
            type=comment_type, number=number
        )

    @staticmethod
    def github_error(error_type: str, error_message: str) -> str:
        """Format GitHub error message"""
        template_map = {
            "auth": MessageTemplates.GITHUB_AUTH_ERROR,
            "api": MessageTemplates.GITHUB_API_ERROR,
            "data": MessageTemplates.GITHUB_DATA_ERROR,
        }
        template = template_map.get(error_type, MessageTemplates.GITHUB_API_ERROR)
        return template.format(error=error_message)

    @staticmethod
    def validation_warning(message: str) -> str:
        """Format validation warning"""
        return MessageTemplates.VALIDATION_WARNING.format(warning_message=message)

    @staticmethod
    def status_update(message: str) -> str:
        """Format status update message"""
        return MessageTemplates.STATUS_UPDATE.format(message=message)

    @staticmethod
    def progress_update(step: str, details: str = "") -> str:
        """Format progress update message"""
        return MessageTemplates.PROGRESS_UPDATE.format(step=step, details=details)

    @staticmethod
    def completion_notification(
        reviewer: str, summary: str, cost_info: str = ""
    ) -> str:
        """Format completion notification"""
        return MessageTemplates.COMPLETION_NOTIFICATION.format(
            reviewer=reviewer, summary=summary, cost_info=cost_info
        )

    @staticmethod
    def error_notification(reviewer: str, error: str) -> str:
        """Format error notification"""
        return MessageTemplates.ERROR_NOTIFICATION.format(
            reviewer=reviewer, error=error
        )

    @staticmethod
    def clarification_request(question: str) -> str:
        """Format clarification request"""
        return MessageTemplates.CLARIFICATION_REQUEST.format(question=question)

    @staticmethod
    def commit_message(task_summary: str) -> str:
        """Format commit message"""
        task_summary_short = task_summary[:50]
        return MessageTemplates.COMMIT_MESSAGE.format(
            task_summary_short=task_summary_short, task_summary=task_summary
        )

    @staticmethod
    def pr_body(
        summary: str, reviewer: str, cost_info: str = "", issue_ref: str = ""
    ) -> str:
        """Format PR body"""
        return MessageTemplates.PR_BODY_TEMPLATE.format(
            summary=summary, reviewer=reviewer, cost_info=cost_info, issue_ref=issue_ref
        )

    @staticmethod
    def pr_task_header(
        pr_number: str, title: str, state: str, branch: str, description: str
    ) -> str:
        """Format PR task extraction header"""
        return MessageTemplates.PR_TASK_HEADER.format(
            pr_number=pr_number,
            title=title,
            state=state,
            branch=branch,
            description=description,
        )

    @staticmethod
    def pr_task_comment(user: str, created_at: str, body: str) -> str:
        """Format PR task comment"""
        return MessageTemplates.PR_TASK_COMMENT.format(
            user=user, created_at=created_at, body=body
        )

#!/bin/bash
#
# Claude Security Scan - Multi-language security scanning utility
# Supports Python and Rust projects with intelligent detection
#

set -e

LANGUAGE="${LANGUAGE:-auto}"
SCAN_TYPE="${1:-scan}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Auto-detect project language
detect_language() {
    if [[ "$LANGUAGE" != "auto" ]]; then
        echo "$LANGUAGE"
        return
    fi
    
    # Look for language-specific files
    if [[ -f "Cargo.toml" ]]; then
        echo "rust"
    elif [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
        echo "python"
    elif [[ -f "package.json" ]]; then
        echo "node"
    else
        # Default to python if nothing else detected
        echo "python"
    fi
}

# Python security scanning
scan_python() {
    log_info "üêç Running Python security scan..."
    local exit_code=0
    
    # Bandit - Python code security scanner
    if command -v bandit >/dev/null 2>&1; then
        log_info "Running Bandit Python security scanner..."
        if bandit -r . -f json -o /tmp/bandit_results.json 2>/dev/null; then
            log_success "Bandit scan completed"
        else
            log_warning "Bandit found potential security issues"
            exit_code=1
        fi
    else
        log_warning "Bandit not available"
    fi
    
    # Safety - Dependency vulnerability scanner
    if command -v safety >/dev/null 2>&1; then
        log_info "Running Safety dependency vulnerability scanner..."
        if safety check --json --output /tmp/safety_results.json 2>/dev/null; then
            log_success "Safety scan completed - no known vulnerabilities"
        else
            log_warning "Safety found dependency vulnerabilities"
            exit_code=1
        fi
    else
        log_warning "Safety not available"
    fi
    
    # pip-audit - Python package vulnerability scanner
    if command -v pip-audit >/dev/null 2>&1; then
        log_info "Running pip-audit vulnerability scanner..."
        if pip-audit --format=json --output /tmp/pip_audit_results.json 2>/dev/null; then
            log_success "pip-audit scan completed"
        else
            log_warning "pip-audit found vulnerabilities"
            exit_code=1
        fi
    else
        log_warning "pip-audit not available"
    fi
    
    return $exit_code
}

# Rust security scanning
scan_rust() {
    log_info "ü¶Ä Running Rust security scan..."
    local exit_code=0
    
    # cargo audit - Dependency vulnerability scanner
    if command -v cargo >/dev/null 2>&1 && cargo audit --version >/dev/null 2>&1; then
        log_info "Running cargo audit..."
        if cargo audit; then
            log_success "cargo audit completed - no known vulnerabilities"
        else
            log_warning "cargo audit found vulnerabilities"
            exit_code=1
        fi
    else
        log_warning "cargo audit not available"
    fi
    
    # cargo clippy - Linter with security checks
    if command -v cargo >/dev/null 2>&1; then
        log_info "Running cargo clippy..."
        if cargo clippy -- -D warnings; then
            log_success "cargo clippy completed with no warnings"
        else
            log_warning "cargo clippy found issues"
            exit_code=1
        fi
    else
        log_warning "cargo not available"
    fi
    
    # cargo deny - License and dependency policy
    if command -v cargo >/dev/null 2>&1 && cargo deny --version >/dev/null 2>&1; then
        log_info "Running cargo deny..."
        if cargo deny check 2>/dev/null; then
            log_success "cargo deny completed - all policies satisfied"
        else
            log_warning "cargo deny found policy violations"
            exit_code=1
        fi
    else
        log_warning "cargo deny not available"
    fi
    
    return $exit_code
}

# General security scanning (language-agnostic)
scan_general() {
    log_info "üîç Running general security checks..."
    local exit_code=0
    
    # Check for common security issues
    log_info "Checking for common security patterns..."
    
    # Look for potential secrets in code
    if grep -r -i -n "password\|secret\|key\|token" --include="*.py" --include="*.rs" --include="*.js" --include="*.ts" . | grep -v ".git" | head -10; then
        log_warning "Potential secrets found in code (review above results)"
        exit_code=1
    else
        log_success "No obvious secrets found in code"
    fi
    
    # Check for world-writable files
    if find . -type f -perm -002 2>/dev/null | head -5 | grep -q .; then
        log_warning "World-writable files found"
        exit_code=1
    else
        log_success "No world-writable files found"
    fi
    
    return $exit_code
}

# Main scanning function
run_scan() {
    local detected_lang
    detected_lang=$(detect_language)
    
    log_info "üõ°Ô∏è  Starting Claude Security Scan"
    log_info "Detected language: $detected_lang"
    
    local overall_exit_code=0
    
    case "$detected_lang" in
        "rust")
            scan_rust
            if [[ $? -ne 0 ]]; then overall_exit_code=1; fi
            ;;
        "python")
            scan_python
            if [[ $? -ne 0 ]]; then overall_exit_code=1; fi
            ;;
        "node")
            log_info "Node.js scanning not yet implemented, running general scan"
            scan_general
            if [[ $? -ne 0 ]]; then overall_exit_code=1; fi
            ;;
        *)
            log_warning "Unknown language '$detected_lang', running general scan"
            scan_general
            if [[ $? -ne 0 ]]; then overall_exit_code=1; fi
            ;;
    esac
    
    # Always run general checks
    log_info ""
    scan_general
    if [[ $? -ne 0 ]]; then overall_exit_code=1; fi
    
    log_info ""
    if [[ $overall_exit_code -eq 0 ]]; then
        log_success "‚úÖ Security scan completed with no issues"
    else
        log_warning "‚ö†Ô∏è  Security scan completed with warnings/issues"
    fi
    
    return $overall_exit_code
}

# Help function
show_help() {
    cat << EOF
Claude Security Scan - Multi-language security scanning utility

Usage: claude-security-scan [COMMAND]

Commands:
    scan        Run security scan (default)
    help        Show this help message

Environment Variables:
    LANGUAGE    Force language detection (python|rust|auto)
                Default: auto

Examples:
    claude-security-scan                    # Auto-detect and scan
    LANGUAGE=rust claude-security-scan     # Force Rust scanning
    claude-security-scan help              # Show help

Exit Codes:
    0           No security issues found
    1           Security issues or warnings found
EOF
}

# Main execution
case "$SCAN_TYPE" in
    "scan"|"")
        run_scan
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        log_error "Unknown command: $SCAN_TYPE"
        show_help
        exit 1
        ;;
esac